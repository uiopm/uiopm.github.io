<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>date类型</title>
    <link href="/2022/08/18/Mybatis%E7%9B%B8%E5%85%B3/"/>
    <url>/2022/08/18/Mybatis%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis时间类型"><a href="#MyBatis时间类型" class="headerlink" title="MyBatis时间类型"></a>MyBatis时间类型</h2><ul><li><p>MyBatis处理日期有两种的jdbcType：</p><ol><li>jdbcType&#x3D;DATE</li><li>jdbcType&#x3D;TIMESTAMP</li></ol></li><li><p>当我们使用java.util.Date作为实体的日期类型时（JAVA没有DateTime这个类，Date类能够同时表示日期和时间），java.util.Date实际上是能够表示MySQL的三种字段类型：</p><ol><li>date</li><li>datetime</li><li>timestamp</li></ol></li><li><p>mybaits处理方式</p><ol><li>当不指定jdbcType时，日期会自动转化会MySQL的timestamp</li><li>指定jdbcType&#x3D;TIMESTAMP，日期会自动转化会MySQL的timestamp</li><li>指定jdbcType&#x3D;DATE，那么MyBatis会将传入参数截取为2018-07-24(Date)</li><li>使用java.util.Date作为参数传递给Mapper时，不管MySQL的日期字段类型是date、datetime或者timestamp中的哪一种，默认缺省情况下，MyBatis都能够自动做出类型转换，可以直接使用 &#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;符号来进行筛选，但是，当我们手动指定jdbcType&#x3D;DATE的时候，MyBatis会自动截取掉时间，只保留日期。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列</title>
    <link href="/2022/08/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2022/08/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li><p><strong>异步</strong>：消息有堆积能力，发送方和接收方不需要同时在线</p></li><li><p><strong>解耦</strong>：防止引入过多的API给系统的稳定性带来风险；生产者和消费者系统之间不互相影响</p></li><li><p><strong>削峰</strong>：将高峰时期大量的请求放入消息队列，服务器按照自己的处理能力来处理消息队列中的数据，避免高峰时期服务器瘫痪</p></li><li><p><strong>缺点</strong>：</p><ol><li>可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MessageQueue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https</title>
    <link href="/2022/08/01/https/"/>
    <url>/2022/08/01/https/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/uiopm/img@main/05234233-eed6ddcba93c42be8847e98d6da62802.jpg" alt="三次握手"></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>众数问题</title>
    <link href="/2022/07/29/%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/29/%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="众数问题"><a href="#众数问题" class="headerlink" title="众数问题"></a>众数问题</h2><h3 id="Boyer-Moore投票算法："><a href="#Boyer-Moore投票算法：" class="headerlink" title="Boyer-Moore投票算法："></a>Boyer-Moore投票算法：</h3><ol><li>如果候选人不是maj 则 maj,会和其他非候选人一起反对 会反对候选人,所以候选人一定会下台(maj&#x3D;&#x3D;0时发生换届选举)</li><li>如果候选人是maj , 则maj 会支持自己，其他候选人会反对，同样因为maj 票数超过一半，所以maj 一定会成功当选</li></ol><h3 id="随机算法："><a href="#随机算法：" class="headerlink" title="随机算法："></a>随机算法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Random random=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> len=nums.length;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> index=random.nextInt(nums.length);<br>            <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums)&#123;<br>                <span class="hljs-keyword">if</span>(num==nums[index]) count++;<br>                <span class="hljs-keyword">if</span>(count&gt;len/<span class="hljs-number">2</span>)&#123;<br>                    <span class="hljs-keyword">return</span> nums[index];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>来源：leetcode169题下用户巴图的评论</strong></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sql注入</title>
    <link href="/2022/07/29/20220729/"/>
    <url>/2022/07/29/20220729/</url>
    
    <content type="html"><![CDATA[<h2 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h2><ul><li>输入的数据变为代码执行</li><li>啥也没学，周五摆烂</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>摆烂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/28/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C1.4.0/"/>
    <url>/2022/07/28/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C1.4.0/</url>
    
    <content type="html"><![CDATA[<h1 id="阿里巴巴Java开发手册-1-4-0"><a href="#阿里巴巴Java开发手册-1-4-0" class="headerlink" title="阿里巴巴Java开发手册 1.4.0"></a>阿里巴巴Java开发手册 1.4.0</h1><h2 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h2><h3 id="（一）名命风格"><a href="#（一）名命风格" class="headerlink" title="（一）名命风格"></a>（一）名命风格</h3><p>【强制】POJO类中布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。</p><p>反例：定义为基本数据类型BooleanisDeleted的属性，它的方法也是isDeleted()，RPC框架在反向解析的时候，“误以为”对应的属性名称是deleted，导致属性获取不到，进而抛出异常。</p><p>【参考】各层命名规约：</p><p>A) Service&#x2F;DAO层方法命名规约</p><pre><code class="hljs">1）获取单个对象的方法用get做前缀。2）获取多个对象的方法用list做前缀，复数形式结尾如：listObjects。3）获取统计值的方法用count做前缀。4）插入的方法用save/insert做前缀。5）删除的方法用remove/delete做前缀。6）修改的方法用update做前缀。</code></pre><p>B) 领域模型命名规约</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>）数据对象：xxxDO，xxx即为数据表名。<br><span class="hljs-number">2</span>）数据传输对象：xxxDTO，xxx为业务领域相关的名称。<br><span class="hljs-number">3</span>）展示对象：xxxVO，xxx一般为网页名称。<br><span class="hljs-number">4</span>）POJO是<span class="hljs-keyword">DO</span><span class="hljs-regexp">/DTO/</span>BO/VO的统称，禁止命名成xxxPOJO。<br></code></pre></td></tr></table></figure><h3 id="（二）常量定义"><a href="#（二）常量定义" class="headerlink" title="（二）常量定义"></a>（二）常量定义</h3><p>【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p><p>【推荐】按照常量功能分类放置，不要使用一个常量类维护所有常量</p><h3 id="（三）代码格式"><a href="#（三）代码格式" class="headerlink" title="（三）代码格式"></a>（三）代码格式</h3><p>【强制】单行字符数限制不超过 120 个，超出需要换行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>） 第二行相对第一行缩进 <span class="hljs-number">4</span> 个空格，从第三行开始，不再继续缩进。<br><span class="hljs-attribute">2</span>） 运算符与下文一起换行。<br><span class="hljs-attribute">3</span>） 方法调用的点符号与下文一起换行。<br><span class="hljs-attribute">4</span>） 方法调用中的多个参数需要换行时，在逗号后进行。 <br><span class="hljs-attribute">5</span>） 在括号前不要换行。<br></code></pre></td></tr></table></figure><p>【推荐】单个方法的总行数不超过 80 行。</p><h3 id="（四）OOP规约-面向对象编程规范"><a href="#（四）OOP规约-面向对象编程规范" class="headerlink" title="（四）OOP规约-(面向对象编程规范)"></a>（四）OOP规约-(面向对象编程规范)</h3><p>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。（实例对象确实能够调用静态变量以及静态方法，但是在编译后的文件里会转换成用类名访问）</p><p>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</p><p>正例：”test”.equals(object);</p><p>反例：object.equals(“test”);</p><p>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）</p><p>关于基本数据类型与包装数据类型的使用标准如下：</p><p>1） 【强制】所有的 POJO 类属性必须使用包装数据类型。</p><p>2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。</p><p>3） 【推荐】所有的局部变量使用基本数据类型。</p><p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</p><p>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p><p>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a,b,c,,&quot;</span>; <br><br>String[] ary = str.split(<span class="hljs-string">&quot;,&quot;</span>); <br><br><span class="hljs-comment">// 预期大于 3，结果是 3</span><br><br>System.out.println(ary.length); <br><br></code></pre></td></tr></table></figure><p> 【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter&#x2F;setter方法。</p><p> 【推荐】类成员与方法访问控制从严：</p><ul><li><p>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 </p></li><li><p>工具类不允许有 public 或 default 构造方法。</p></li><li><p>类非 static 成员变量并且与子类共享，必须是 protected。 </p></li><li><p>类非 static 成员变量并且仅在本类使用，必须是 private。 </p></li><li><p>类 static 成员变量如果仅在本类使用，必须是 private。 </p></li><li><p>若是 static 成员变量，考虑是否为 final。 </p></li><li><p>类成员方法只供类内部调用，必须是 private。 </p></li><li><p>类成员方法只对继承类公开，那么限制为 protected。</p></li></ul><p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p><p>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p><h4 id="五-集合处理"><a href="#五-集合处理" class="headerlink" title="(五) 集合处理"></a>(五) 集合处理</h4><p> 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。</p><p>说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(<span class="hljs-number">2</span>); <br><br>list.add(<span class="hljs-string">&quot;guan&quot;</span>); <br><br>list.add(<span class="hljs-string">&quot;bao&quot;</span>); <br><br>String[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[list.size()]; <br><br>array = list.toArray(array); <br></code></pre></td></tr></table></figure><p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p><p>【强制】不要在 foreach 循环里进行元素的 remove&#x2F;add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br><br>list.add(<span class="hljs-string">&quot;1&quot;</span>); <br><br>list.add(<span class="hljs-string">&quot;2&quot;</span>); <br><br>Iterator&lt;String&gt; iterator = list.iterator(); <br><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123; <br><br><span class="hljs-type">String</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> iterator.next(); <br><br><span class="hljs-keyword">if</span> (删除元素的条件) &#123; <br><br>iterator.remove(); <br><br>&#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (String item : list) &#123; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(item)) &#123; <br><br>list.remove(item); <br><br>&#125; <br><br>&#125; <br></code></pre></td></tr></table></figure><p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p><p> 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。</p><p>说明：三个条件如下 </p><p>1） x，y 的比较结果和 y，x 的比较结果相反。</p><p>2） x&gt;y，y&gt;z，则 x&gt;z。 </p><p>3） x&#x3D;y，则 x，z 比较结果和 y，z 比较结果相同。</p><p>反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123; <br><br><span class="hljs-meta">@Override</span> <br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123; <br><br><span class="hljs-keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>; <br><br>&#125; <br><br>&#125;;<br></code></pre></td></tr></table></figure><p> 【推荐】集合初始化时，指定集合初始值大小。</p><p>说明：HashMap 使用 HashMap(int initialCapacity) 初始化。 </p><p>正例：initialCapacity &#x3D; (需要存储的元素个数 &#x2F; 负载因子) + 1。注意负载因子（即 loader factor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</p><p>反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。</p><p> 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</p><p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。</p><p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p><p> 【推荐】高度注意 Map 类集合 K&#x2F;V 能不能存储 null 值的情况，如下表格：</p><p>![image-20220719213159042](&#x2F;Users&#x2F;fengke&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220719213159042.png)</p><p>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</p><p> 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。</p><p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order&#x2F;unsort；HashMap 是 unorder&#x2F;unsort；TreeSet 是order&#x2F;sort。</p><h3 id="六-并发处理"><a href="#六-并发处理" class="headerlink" title="(六) 并发处理"></a>(六) 并发处理</h3><p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>说明：Executors 返回的线程池对象的弊端如下： </p><p>1）FixedThreadPool 和 SingleThreadPool:</p><p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </p><p>2）CachedThreadPool 和 ScheduledThreadPool:</p><p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><p> 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。</p><p>说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</p><p>正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保</p><p>证每个线程持有一个实例。</p><p> 【推荐】在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。</p><p>(感觉和双锁实现单例模型类似)</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyInitDemo</span> &#123; <br><span class="hljs-keyword">private</span> <span class="hljs-type">Helper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <br><span class="hljs-keyword">public</span> Helper <span class="hljs-title function_">getHelper</span><span class="hljs-params">()</span> &#123; <br><span class="hljs-keyword">if</span> (helper == <span class="hljs-literal">null</span>) <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123; <br><span class="hljs-keyword">if</span> (helper == <span class="hljs-literal">null</span>) <br>helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>(); <br>&#125; <br><span class="hljs-keyword">return</span> helper; <br>&#125; <br><span class="hljs-comment">// other methods and fields... </span><br>&#125; <br></code></pre></td></tr></table></figure><h3 id="七-控制语句"><a href="#七-控制语句" class="headerlink" title="(七) 控制语句"></a>(七) 控制语句</h3><p> 【强制】在一个 switch 块内，每个 case 要么通过 break&#x2F;return 等来终止，要么注释说明程序将继续执行到哪一个case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使空代码。</p><p>【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</p><p>说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</p><p>反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。</p><p>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</p><h3 id="八-注释规约"><a href="#八-注释规约" class="headerlink" title="(八) 注释规约"></a>(八) 注释规约</h3><p>从总体来说，精简准确，表达到位的注释是写给自己看的，方便理解生产代码时的思路；也是写给继任者看的，使其快速接替自己的工作</p><h3 id="九-其他"><a href="#九-其他" class="headerlink" title="(九) 其他"></a>(九) 其他</h3><p> 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。</p><p>说明：如果 var 等于 null 或者不存在，那么${var}会直接显示在页面上。</p><p> 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</p><p> 【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p><p>【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p><h2 id="二、异常日志"><a href="#二、异常日志" class="headerlink" title="二、异常日志"></a>二、异常日志</h2><h3 id="一-异常处理"><a href="#一-异常处理" class="headerlink" title="(一) 异常处理"></a>(一) 异常处理</h3><p>catch的使用需要认真负责，可以预检查发现的异常不应该使用catch，注意稳定代码和非稳定代码的区分，不要大面积代码使用 try-catch </p><p> 【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p><p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分</p><p>说明什么情况下会返回 null 值。说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。</p><p>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p><p>1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p><p>反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 </p><p>2） 数据库的查询结果可能为 null。 </p><p>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 </p><p>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。 </p><p>5） 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</p><p>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p><p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p><h3 id="二-日志规约"><a href="#二-日志规约" class="headerlink" title="(二) 日志规约"></a>(二) 日志规约</h3><p> 【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。</p><p>logType:日志类型，如 stats&#x2F;monitor&#x2F;access 等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p><p>正例：mppserver 应用中单独监控时区转换异常，如：</p><p>mppserver_monitor_timeZoneConvert.log</p><p>说明：推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p><p> 【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity&#x3D;false。</p><p>正例：<logger name="com.taobao.dubbo.config" additivity="false"> </p><h2 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h2><p>【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。（AIR原则：A：Automatic自动化，I：Independent独立性，R：Repeatable可重复性）</p><p>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</p><p>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p><p>【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</p><p>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。</p><p>BCDE原则：</p><ul><li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li><li>C：Correct，正确的输入，并得到预期的结果。</li><li>D：Design，与设计文档相结合，来编写单元测试。</li><li>E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li></ul><p>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</p><p>单元测试存在的确有其道理，现在似乎是用前后端初步测试再配合测试人员测试来代替单元测试的</p><h2 id="四、安全规约"><a href="#四、安全规约" class="headerlink" title="四、安全规约"></a>四、安全规约</h2><p>【强制】用户请求传入的任何参数必须做有效性验证。</p><p>说明：忽略参数校验可能导致：</p><ul><li><p>page size 过大导致内存溢出</p></li><li><p>恶意 order by 导致数据库慢查询</p></li><li><p>任意重定向</p></li><li><p>SQL 注入</p></li><li><p>反序列化注入</p></li><li><p>正则输入源串拒绝服务 ReDoS</p></li></ul><p>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p><p>主要内容就是开发过程中，需要考虑到对用户信息的保护，信息脱敏；需要做到系统本身安全的保护，对于非正常用户的防范；做到对发言信息的简单过滤</p><h2 id="五、MySQL数据库"><a href="#五、MySQL数据库" class="headerlink" title="五、MySQL数据库"></a>五、MySQL数据库</h2><h3 id="一-建表规约"><a href="#一-建表规约" class="headerlink" title="(一) 建表规约"></a>(一) 建表规约</h3><p>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><p>说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</p><p>正例：aliyun_admin，rdc_config，level3_name</p><p>反例：AliyunAdmin，rdcConfig，level_3_name</p><p> 【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p><p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p><p> 【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p><p>【强制】表必备三字段：id, gmt_create, gmt_modified。说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p><h3 id="二-索引规约"><a href="#二-索引规约" class="headerlink" title="(二) 索引规约"></a>(二) 索引规约</h3><p> 【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p><p> 【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p><p>【推荐】利用延迟关联或者子查询优化超多分页场景。<code>()分页现在使用IPage接口的话只有一次查询也需要使用这条规约吗</code></p><p>说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p><p>正例：先快速定位需要获取的 id 段，然后再关联：</p><p>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id&#x3D;b.id</p><p>【推荐】SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts最好。</p><p>说明：</p><p>1）consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</p><p>2）ref 指的是使用普通的索引（normal index）。 </p><p>3）range 对索引进行范围检索。</p><p>反例：explain 表的结果，type&#x3D;index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p><p> 【推荐】建组合索引的时候，区分度最高的在最左边。</p><p>正例：如果 where a&#x3D;? and b&#x3D;? ，如果 a 列的几乎接近于唯一值，那么只需要单建 idx_a索引即可。</p><p>说明：存在非等号和等号混合时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d&#x3D;? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即索引 idx_d_c。</p><h3 id="三-SQL语句"><a href="#三-SQL语句" class="headerlink" title="(三) SQL语句"></a>(三) SQL语句</h3><p>【强制】不要使用 count(列名)或 count(常量)来替代 count(<em>)，count(</em>)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p><p>【强制】当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。</p><p>正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;</p><p>【强制】在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p><p>说明：以学生和成绩的关系为例，学生表中的 student_id是主键，那么成绩表中的 student_id则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p><p>【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p><h3 id="四-ORM映射"><a href="#四-ORM映射" class="headerlink" title="(四) ORM映射"></a>(四) ORM映射</h3><p>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</p><p>说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。3）无用字段增加网络消耗，尤其是 text 类型的字段。</p><p>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个 POJO 类与之对应。</p><p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p><p> 【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p><p>说明：resultClass&#x3D;”Hashtable”，会置入字段名和属性值，但是值的类型不可控。</p><h2 id="六、工程结构"><a href="#六、工程结构" class="headerlink" title="六、工程结构"></a>六、工程结构</h2><h3 id="一-应用分层"><a href="#一-应用分层" class="headerlink" title="(一) 应用分层"></a>(一) 应用分层</h3><p>DAO层产生的异常可能比较多但是不用打印日志，因为日志在 Manager&#x2F;Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。处理异常的时候也要注意最上层的用户友好性。</p><p>【参考】分层领域模型规约：</p><ul><li><p><strong>DO</strong>（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。 </p></li><li><p><strong>DTO</strong>（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。 </p></li><li><p><strong>BO</strong>（Business Object）：业务对象，由 Service 层输出的封装业务逻辑的对象。 </p></li><li><p><strong>AO</strong>（Application Object）：应用对象，在 Web 层与 Service 层之间抽象的复用对象模型，</p></li></ul><p>极为贴近展示层，复用度不高。 </p><ul><li><p><strong>VO</strong>（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p></li><li><p><strong>Query</strong>：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止</p></li></ul><p>使用 Map 类来传输。 </p><h3 id="二-第二方库依赖"><a href="#二-第二方库依赖" class="headerlink" title="(二) 第二方库依赖"></a>(二) 第二方库依赖</h3><p>【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p><p>说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p><h3 id="三-服务器"><a href="#三-服务器" class="headerlink" title="(三) 服务器"></a>(三) 服务器</h3><p>这一块涉及到的知识了解过但是几乎没有实际使用过，涉及到JVM环境参数的设置，Xms和Xmx对于GC回收的影响，在后续的继续学习中应该能够更加深入的了解。</p><h2 id="七、设计规约"><a href="#七、设计规约" class="headerlink" title="七、设计规约"></a>七、设计规约</h2><p>【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合&#x2F;组合的方式来实现。</p><p>说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p><p>设计规约的主要内容感觉是从之前的细节规约走出来了，到一个比较高的层次，对代码不同层次进行约束；存在很多设计模式的思想，同时对复杂代码的文档做出了一定要求</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RPC</title>
    <link href="/2022/07/28/20220728/"/>
    <url>/2022/07/28/20220728/</url>
    
    <content type="html"><![CDATA[<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><ul><li>Remote Procedure Call 远程过程调用，服务消费者可以像调用本地方法一样调用服务</li><li>注册中心<ul><li>在dubbo中，由于本地缓存，注册中心宕机也不影响消费者调用服务</li><li>在dubbo中，注册中心会将变更推送给消费服务者</li></ul></li><li>约定协议</li><li>序列化格式<ul><li>序列化：将数据结构或对象转化为二进制串传输</li><li>反序列化：将二进制串转化为数据结构和对象用于数据处理</li></ul></li><li>容错机制</li><li>负载均衡策略</li><li>监控运维<ul><li>dubbo，定时发送调用次数和时间等相关统计数据到监控中心</li></ul></li><li>服务消费者</li><li>服务提供者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/uiopm/img@main/image-20220728213856944.png" alt="dubbo架构"></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>rpc</tag>
      
      <tag>dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FRAUDAR算法</title>
    <link href="/2022/07/28/fraudar/"/>
    <url>/2022/07/28/fraudar/</url>
    
    <content type="html"><![CDATA[<h2 id="FRAUDAR算法"><a href="#FRAUDAR算法" class="headerlink" title="FRAUDAR算法"></a>FRAUDAR算法</h2><ul><li><p><strong>基于二部图表示</strong></p><ul><li>二部图：网络中存在两种类型的节点Users和Objects，文中假设可能存在一个或多个Users收到相关某个实体的控制，进而与Objects的某个子集交互而产生连边。找到一个S，使得S构成子图的嫌疑指标g(S)最大</li><li>两类结点组成的欺诈场景还可以举出很多例子，如电商场景下用户对商户的薅羊毛、刷好评，如社交场景下水军账号的虚假关注、转发，又如消金场景下用户与商户勾结对平台的消费贷套现欺诈。这些行为都会使两类结点之间出现异常的连接分布，从整体网络看来其呈现出了一张致密的双边连接子图，且该子图内的结点与图外结点联系相对较少，把这种大量的、同步的非正常关联行为模式称之为Lockstep，即在本不应出现聚集行为的二部图自然关系网络中，出现了双边聚集性行为。</li></ul></li><li><p><strong>表现</strong>：该论文主要针对社交虚假粉丝，虚假关注， 虚假评价和等场景， 同时针对伪装进行良好的算法设计，在Twitter公开数据集上能够挖掘出存在购买虚假粉丝账号的博主，该博主账号7年未被Twitter检测到。</p></li><li><p><strong>步骤</strong></p><ol><li>将优先级最高的节点移出二部图  </li><li>更新与移出节点相关的节点可疑度 </li><li>反复执行步骤1和步骤2，直至所有节点都被移出 </li><li>最后比较各轮迭代中节点的可疑度数，找到最大可疑度对应的子图</li></ol></li><li><p><strong>特点</strong></p><ul><li>识别伪装</li><li>理论保证</li><li>发现密集块</li><li>实际数据表现好</li><li>可扩展性，接近线性的时间复杂度</li><li>提出了一系列新颖的指标用于度量可疑程度</li></ul></li><li><p><strong>背景</strong></p><ul><li>global method：这类方法偏矩阵分解的方式，可以获得稠密的sub 矩阵块， 像Holoscope 也是用这种方式来做加速和初始化。</li><li>本地聚类方法：就是local search 的方式，就是在定义一个obj之后通过search的方式在整体的图中，组合的search找到一个局部最优解。</li><li>Dense Subgraph mining： 这种社区划分类似的方法，或者图切割的方式可以找到子图，但是对于欺诈的场景下，还是类似于Local Clustering Methods</li></ul></li></ul><p>​<em><strong>注：spectral algorithms可以指代使用了SVD特征值分解的算法</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>风险控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8特性</title>
    <link href="/2022/07/27/20220727/"/>
    <url>/2022/07/27/20220727/</url>
    
    <content type="html"><![CDATA[<h1 id="Java8特性"><a href="#Java8特性" class="headerlink" title="Java8特性"></a>Java8特性</h1><ul><li><p>Lambda表达式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;ListNode&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<br>lists.lenth, (a, b) -&gt; (a.val - b.val));<br></code></pre></td></tr></table></figure></li><li><p>stream()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//map</span><br>String[] rightsIds= malltRightsTagList.stream()<br>        .map(MalltRightsTag::getRightsId).toArray(String[]::<span class="hljs-keyword">new</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//filter</span><br>stringList.stream()<br>          .filter((s) -&gt; s.startsWith(<span class="hljs-string">&quot;a&quot;</span>))<br>          .forEach(System.out::println);<span class="hljs-comment">//aaa2 aaa1</span><br></code></pre></td></tr></table></figure></li><li><p><T> T[] list.toArray(T[] a); </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] strs = list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java8</tag>
      
      <tag>lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
