<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Boyer-Moore投票算法</title>
    <link href="/2022/07/29/%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2022/07/29/%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Boyer-Moore投票算法"><a href="#Boyer-Moore投票算法" class="headerlink" title="Boyer-Moore投票算法"></a>Boyer-Moore投票算法</h2><h3 id="思路和证明："><a href="#思路和证明：" class="headerlink" title="思路和证明："></a>思路和证明：</h3><ol><li>如果候选人不是maj 则 maj,会和其他非候选人一起反对 会反对候选人,所以候选人一定会下台(maj&#x3D;&#x3D;0时发生换届选举)</li><li>如果候选人是maj , 则maj 会支持自己，其他候选人会反对，同样因为maj 票数超过一半，所以maj 一定会成功当选</li></ol><p><strong>来源：leetcode169题下用户巴图的评论</strong></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sql注入</title>
    <link href="/2022/07/29/20220729/"/>
    <url>/2022/07/29/20220729/</url>
    
    <content type="html"><![CDATA[<h2 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h2><ul><li>输入的数据变为代码执行</li><li>啥也没学，周五摆烂</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>摆烂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC</title>
    <link href="/2022/07/28/20220728/"/>
    <url>/2022/07/28/20220728/</url>
    
    <content type="html"><![CDATA[<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><ul><li>Remote Procedure Call 远程过程调用，服务消费者可以像调用本地方法一样调用服务</li><li>注册中心<ul><li>在dubbo中，由于本地缓存，注册中心宕机也不影响消费者调用服务</li><li>在dubbo中，注册中心会将变更推送给消费服务者</li></ul></li><li>约定协议</li><li>序列化格式<ul><li>序列化：将数据结构或对象转化为二进制串传输</li><li>反序列化：将二进制串转化为数据结构和对象用于数据处理</li></ul></li><li>容错机制</li><li>负载均衡策略</li><li>监控运维<ul><li>dubbo，定时发送调用次数和时间等相关统计数据到监控中心</li></ul></li><li>服务消费者</li><li>服务提供者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/uiopm/img@main/image-20220728213856944.png" alt="dubbo架构"></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>rpc</tag>
      
      <tag>dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FRAUDAR算法</title>
    <link href="/2022/07/28/fraudar/"/>
    <url>/2022/07/28/fraudar/</url>
    
    <content type="html"><![CDATA[<h2 id="FRAUDAR算法"><a href="#FRAUDAR算法" class="headerlink" title="FRAUDAR算法"></a>FRAUDAR算法</h2><ul><li><p>基于二部图表示</p><ul><li>二部图：网络中存在两种类型的节点Users和Objects，文中假设可能存在一个或多个Users收到相关某个实体的控制，进而与Objects的某个子集交互而产生连边。</li></ul></li><li><p>目标：找到一个S，使得S构成子图的嫌疑指标g(S)最大</p></li><li><p><strong>步骤</strong></p><ol><li>将优先级最高的节点移出二部图  </li><li>更新与移出节点相关的节点可疑度 </li><li>反复执行步骤1和步骤2，直至所有节点都被移出 </li><li>最后比较各轮迭代中节点的可疑度数，找到最大可疑度对应的子图</li></ol></li><li><p>特点</p><ul><li>识别伪装</li><li>识别效率上限高</li><li>实际数据表现好</li></ul></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>风险控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8特性</title>
    <link href="/2022/07/27/20220727/"/>
    <url>/2022/07/27/20220727/</url>
    
    <content type="html"><![CDATA[<h1 id="Java8特性"><a href="#Java8特性" class="headerlink" title="Java8特性"></a>Java8特性</h1><ul><li><p>Lambda表达式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;ListNode&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<br>lists.lenth, (a, b) -&gt; (a.val - b.val));<br></code></pre></td></tr></table></figure></li><li><p>stream()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//map</span><br>String[] rightsIds= malltRightsTagList.stream()<br>        .map(MalltRightsTag::getRightsId).toArray(String[]::<span class="hljs-keyword">new</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//filter</span><br>stringList.stream()<br>          .filter((s) -&gt; s.startsWith(<span class="hljs-string">&quot;a&quot;</span>))<br>          .forEach(System.out::println);<span class="hljs-comment">//aaa2 aaa1</span><br></code></pre></td></tr></table></figure></li><li><p><T> T[] list.toArray(T[] a); </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] strs = list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java8</tag>
      
      <tag>lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
